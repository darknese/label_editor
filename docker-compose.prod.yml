
x-postgres-variables: &postgres-variables
  POSTGRES_DB: label-editor
  POSTGRES_USER: label-editor
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

x-minio-variables: &minio-variables
  MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  MINIO_BUCKET: ${MINIO_BUCKET}

services:
  postgres:
    image: postgres:latest
    container_name: postgres-label-editor
    restart: always
    environment:
      <<: *postgres-variables
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio-label-editor
    command: server /data --console-address ":9001"
    environment:
      <<: *minio-variables
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - internal
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${SITE}`)"
      - "traefik.http.routers.minio.entrypoints=https"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"

  minio-client:
    image: minio/mc
    container_name: minio-client-label-editor
    depends_on:
      - minio
    entrypoint: /bin/sh -c
    command: >
      "
      sleep 10 &&
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing local/${MINIO_BUCKET} &&
      mc anonymous set download local/${MINIO_BUCKET}
      "
    networks:
      - internal

  server:
    build:
      context: ./server
    container_name: server-label-editor
    restart: always
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - postgres
      - minio
    networks:
      - internal

  client:
    build:
      context: ./client
    container_name: client-label-editor
    restart: always
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${SITE}`)"
      - "traefik.http.routers.client.entrypoints=https"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.services.client.loadbalancer.server.port=80"

  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: always
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt"
    networks:
      - traefik_proxy

volumes:
  postgres_data:
  minio_data:
  traefik_letsencrypt:

networks:
  internal:
    driver: bridge
  traefik_proxy:
    driver: bridge
